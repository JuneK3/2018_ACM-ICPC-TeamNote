ll init(&a, &tree, n, l, r) {
    if (l == r) {
        return tree[n] = a[l];
    } else {
        return tree[n] = init(a, tree, n*2, l, (l+r)/2) + init(a, tree, n*2+1, (l+r)/2+1, r);
    }
}

void update_lazy(&tree, &lazy, n, l, r) {
    if (lazy[n] != 0) {
        tree[n] += (r-l+1)*lazy[n];
        if (l != r) {
            lazy[n*2] += lazy[n];
            lazy[n*2+1] += lazy[n];
        }
        lazy[n] = 0;
    }
}

void update_range(&tree, &lazy, n, l, r, st, ed, diff) {
    update_lazy(tree, lazy, n, l, r);
    if (st > r || ed < l) {
        return;
    }
    if (st <= l && r <= ed) {
        tree[n] += (r-l+1)*diff;
        if (l != r) {
            lazy[n*2] += diff;
            lazy[n*2+1] += diff;
        }
        return;
    }
    update_range(tree, lazy, n*2, l, (l+r)/2, st, ed, diff);
    update_range(tree, lazy, n*2+1, (l+r)/2+1, r, st, ed, diff);
    tree[n] = tree[n*2] + tree[n*2+1];

}
    /* if (i < l || i > r) return;
    tree[n] = tree[n] + diff;
    if (l != r) {
        update(tree,n*2, l, (l+r)/2, i, diff);
        update(tree,n*2+1, (l+r)/2+1, r, i, diff);
    } */

ll sum(&tree, &lazy, n, l, r, st, ed) {
    update_lazy(tree, lazy, n, l, r);
    if (st > r || ed < l) {
        return 0;
    }
    if (st <= l && r <= ed) {
        return tree[n];
    }
    return sum(tree, lazy, n*2, l, (l+r)/2, st, ed) + sum(tree, lazy, n*2+1, (l+r)/2+1, r, st, ed);
}

// sz
h = (int)ceil(log2(n));
tree_size = (1 << (h+1)) - 1;